# (Be in -*- mode: python; coding: utf-8 -*- mode.)
#
# ====================================================================
# Copyright (c) 2006-2010 CollabNet.  All rights reserved.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at http://subversion.tigris.org/license-1.html.
# If newer versions of this license are posted there, you may use a
# newer version instead, at your option.
#
# This software consists of voluntary contributions made by many
# individuals.  For exact contribution history, see the revision
# history and logs, available at http://cvs2svn.tigris.org/.
# ====================================================================

# Two identifiers will have been defined before this file is executed,
# and can be used freely within this file:
#
#     ctx -- a Ctx object (see cvs2svn_lib/context.py), which holds
#         many configuration options
#
#     run_options -- an instance of the GitRunOptions class (see
#         cvs2svn_lib/git_run_options.py), which holds some variables
#         governing how cvs2git is run

import os
from os.path import join,exists, isdir
from comp_users_map import COMP_USERS
from glob import glob

from cvs2svn_lib import config
from cvs2svn_lib import changeset_database
from cvs2svn_lib.common import CVSTextDecoder
from cvs2svn_lib.log import logger
from cvs2svn_lib.git_revision_collector import GitRevisionCollector
from cvs2svn_lib.external_blob_generator import ExternalBlobGenerator
from cvs2svn_lib.git_output_option import GitRevisionMarkWriter
from cvs2svn_lib.git_output_option import GitOutputOption
from cvs2svn_lib.svn_output_option import NewRepositoryOutputOption
from cvs2svn_lib.dvcs_common import KeywordHandlingPropertySetter
from cvs2svn_lib.rcs_revision_manager import RCSRevisionReader
from cvs2svn_lib.cvs_revision_manager import CVSRevisionReader
from cvs2svn_lib.checkout_internal import InternalRevisionReader
from cvs2svn_lib.checkout_internal import InternalRevisionCollector
from cvs2svn_lib.symbol_strategy import AllBranchRule
from cvs2svn_lib.symbol_strategy import AllTagRule
from cvs2svn_lib.symbol_strategy import BranchIfCommitsRule
from cvs2svn_lib.symbol_strategy import ExcludeRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceBranchRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceTagRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ExcludeTrivialImportBranchRule
from cvs2svn_lib.symbol_strategy import ExcludeVendorBranchRule
from cvs2svn_lib.symbol_strategy import HeuristicStrategyRule
from cvs2svn_lib.symbol_strategy import convert_as_branch
from cvs2svn_lib.symbol_strategy import ManualSymbolRule
from cvs2svn_lib.symbol_strategy import UnambiguousUsageRule
from cvs2svn_lib.symbol_strategy import HeuristicPreferredParentRule
from cvs2svn_lib.symbol_strategy import SymbolHintsFileRule
from cvs2svn_lib.symbol_transform import ReplaceSubstringsSymbolTransform
from cvs2svn_lib.symbol_transform import RegexpSymbolTransform
from cvs2svn_lib.symbol_transform import IgnoreSymbolTransform
from cvs2svn_lib.symbol_transform import NormalizePathsSymbolTransform
from cvs2svn_lib.symbol_transform import SubtreeSymbolTransform
from cvs2svn_lib.property_setters import AutoPropsPropertySetter
from cvs2svn_lib.property_setters import ConditionalPropertySetter
from cvs2svn_lib.property_setters import cvs_file_is_binary
from cvs2svn_lib.property_setters import CVSBinaryFileDefaultMimeTypeSetter
from cvs2svn_lib.property_setters import CVSBinaryFileEOLStyleSetter
from cvs2svn_lib.property_setters import DefaultEOLStyleSetter
from cvs2svn_lib.property_setters import EOLStyleFromMimeTypeSetter
from cvs2svn_lib.property_setters import ExecutablePropertySetter
from cvs2svn_lib.property_setters import KeywordsPropertySetter
from cvs2svn_lib.property_setters import MimeMapper
from cvs2svn_lib.property_setters import SVNBinaryFileKeywordsPropertySetter
from cvs2svn_lib.keyword_expander import _KeywordExpander

logger.log_level = logger.VERBOSE
_KeywordExpander.use_old_date_format()

project = "COMPPROJECT"
#repository_dir = "/afs/cern.ch/project/cvs/reps/CMSSW/COMP"
repository_dir = "/build/diego/gitcmsdist/cmssw2git/tmp/cvs/CMSSW/COMP"
ctx.tmpdir = r'tmp/cvs2git-%s-tmp' % project
if not exists(ctx.tmpdir):
  os.makedirs(ctx.tmpdir)

ctx.revision_collector = GitRevisionCollector(
    join(ctx.tmpdir, 'git-blob.dat'),
    CVSRevisionReader(cvs_executable=r'cvs'),
)

ctx.revision_reader = None
ctx.trunk_only = False

ctx.cvs_author_decoder = CVSTextDecoder(['utf8'], fallback_encoding='ascii')
ctx.cvs_log_decoder = CVSTextDecoder(['utf8'], fallback_encoding='ascii', eol_fix='\n')
ctx.cvs_filename_decoder = CVSTextDecoder(['utf8'], fallback_encoding='ascii')
ctx.initial_project_commit_message = ('Standard project directories initialized by cvs2git.')
ctx.post_commit_message = ('This commit was generated by cvs2git to track changes on a CVS vendor branch.')
ctx.symbol_commit_message = ("This commit was manufactured by cvs2git to create %(symbol_type)s '%(symbol_name)s'.")
ctx.tie_tag_ancestry_message = ("This commit was manufactured by cvs2git to tie ancestry for tag '%(symbol_name)s' back to the source branch.")

ctx.decode_apple_single = False

ctx.symbol_info_filename = 'symbols-out.txt'
global_symbol_strategy_rules = [
    ExcludeTrivialImportBranchRule(),
    UnambiguousUsageRule(),
    BranchIfCommitsRule(),
    HeuristicStrategyRule(),
    HeuristicPreferredParentRule(),
    ]

ctx.username = 'cmsbuild'

ctx.file_property_setters.extend([
    CVSBinaryFileEOLStyleSetter(),
    CVSBinaryFileDefaultMimeTypeSetter(),
    DefaultEOLStyleSetter(None),
    SVNBinaryFileKeywordsPropertySetter(),
    KeywordsPropertySetter(config.SVN_KEYWORDS_VALUE),
    ExecutablePropertySetter(),
    ConditionalPropertySetter(cvs_file_is_binary, KeywordHandlingPropertySetter('untouched')),
    KeywordHandlingPropertySetter('expanded'),
    ])

ctx.revision_property_setters.extend([
    ])

ctx.cross_project_commits = False
ctx.cross_branch_commits = False
ctx.keep_cvsignore = True
ctx.retain_conflicting_attic_files = False
ctx.output_option = GitOutputOption(
    os.path.join(ctx.tmpdir, 'git-dump.dat'),
    GitRevisionMarkWriter(),
    author_transforms=COMP_USERS)

# Change this option to True to turn on profiling of cvs2git (for
# debugging purposes):
run_options.profiling = False

project_opts = {
                #"symbol_transforms": [
                #ReplaceSubstringsSymbolTransform('\\','/'),

                # This last rule eliminates leading, trailing, and repeated
                # slashes within the output symbol names:
                #RegexpSymbolTransform("(.*)/", "\\1-"),
                #NormalizePathsSymbolTransform(),
                #            ],
            "symbol_strategy_rules": global_symbol_strategy_rules,
            "exclude_paths": [],
       }

run_options.set_project(join(repository_dir, project), **project_opts)
